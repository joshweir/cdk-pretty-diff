"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.diffValidator = exports.guardResourceDiff = exports.nicerStackDiffValidator = exports.nicerStackDiffGuard = exports.nicerDiffGuard = exports.cdkDiffCategories = void 0;
exports.cdkDiffCategories = ['iamChanges', 'securityGroup', 'resources', 'parameters', 'metadata', 'mappings', 'conditions', 'outputs', 'unknown', 'description'];
const nicerDiffGuard = (thing) => typeof thing === 'object' &&
    typeof thing.label === 'string' &&
    typeof thing.cdkDiffRaw === 'string' &&
    ['undefined', 'object'].includes(typeof thing.nicerDiff);
exports.nicerDiffGuard = nicerDiffGuard;
const nicerStackDiffGuard = (thing) => {
    if (typeof thing === 'object') {
        if (typeof thing.raw === 'string' && typeof thing.stackName === 'string') {
            if (!!thing.diff) {
                if (thing.diff.filter(exports.nicerDiffGuard).length === thing.diff.length) {
                    return true;
                }
            }
            return true;
        }
    }
    return false;
};
exports.nicerStackDiffGuard = nicerStackDiffGuard;
const nicerStackDiffValidator = (thing) => {
    if (typeof thing === 'object') {
        if (thing.filter(exports.nicerStackDiffGuard).length === thing.length) {
            return thing;
        }
    }
    throw new Error(`input is not a NicerStackDiff[]: ${JSON.stringify(thing, null, 2)}`);
};
exports.nicerStackDiffValidator = nicerStackDiffValidator;
const guardResourceDiff = (thing) => typeof thing === 'object' &&
    typeof thing.forEachDifference === 'function';
exports.guardResourceDiff = guardResourceDiff;
const diffValidator = (thing) => {
    if (typeof thing === 'object') {
        if (thing.length === 2) {
            const [diffKey, diff] = thing;
            if (!exports.cdkDiffCategories.includes(diffKey)) {
                throw new Error(`unexpected diff category: ${diffKey}`);
            }
            if (diffKey === 'description') {
                return { diffKey, diff };
            }
            else if (typeof diff === 'object' && diff.hasOwnProperty('diffs')) {
                return { diffCollectionKey: diffKey, diffCollection: diff };
            }
        }
    }
    throw new Error(`invalid diff: ${JSON.stringify(thing, null, 2)}`);
};
exports.diffValidator = diffValidator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR2EsUUFBQSxpQkFBaUIsR0FBRyxDQUFDLFlBQVksRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLGFBQWEsQ0FBVSxDQUFDO0FBMEJ6SyxNQUFNLGNBQWMsR0FBRyxDQUFDLEtBQVUsRUFBc0IsRUFBRSxDQUMvRCxPQUFPLEtBQUssS0FBSyxRQUFRO0lBQ3pCLE9BQU8sS0FBSyxDQUFDLEtBQUssS0FBSyxRQUFRO0lBQy9CLE9BQU8sS0FBSyxDQUFDLFVBQVUsS0FBSyxRQUFRO0lBQ3BDLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUo5QyxRQUFBLGNBQWMsa0JBSWdDO0FBUXBELE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxLQUFVLEVBQTJCLEVBQUU7SUFDekUsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDN0IsSUFBSSxPQUFPLEtBQUssQ0FBQyxHQUFHLEtBQUssUUFBUSxJQUFJLE9BQU8sS0FBSyxDQUFDLFNBQVMsS0FBSyxRQUFRLEVBQUU7WUFDeEUsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtnQkFDaEIsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxzQkFBYyxDQUFDLENBQUMsTUFBTSxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO29CQUNsRSxPQUFPLElBQUksQ0FBQztpQkFDYjthQUNGO1lBRUQsT0FBTyxJQUFJLENBQUM7U0FDYjtLQUNGO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLENBQUE7QUFkWSxRQUFBLG1CQUFtQix1QkFjL0I7QUFFTSxNQUFNLHVCQUF1QixHQUFHLENBQUMsS0FBVSxFQUFvQixFQUFFO0lBQ3RFLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1FBQzdCLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQywyQkFBbUIsQ0FBQyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQzdELE9BQU8sS0FBSyxDQUFDO1NBQ2Q7S0FDRjtJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEYsQ0FBQyxDQUFBO0FBUlksUUFBQSx1QkFBdUIsMkJBUW5DO0FBRU0sTUFBTSxpQkFBaUIsR0FBRyxDQUFDLEtBQVUsRUFBdUMsRUFBRSxDQUNuRixPQUFPLEtBQUssS0FBSyxRQUFRO0lBQ3pCLE9BQU8sS0FBSyxDQUFDLGlCQUFpQixLQUFLLFVBQVUsQ0FBQztBQUZuQyxRQUFBLGlCQUFpQixxQkFFa0I7QUFFekMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxLQUFVLEVBQW9MLEVBQUU7SUFDNU4sSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDN0IsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN0QixNQUFNLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUU5QixJQUFJLENBQUMseUJBQWlCLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUN4QyxNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixPQUFPLEVBQUUsQ0FBQyxDQUFDO2FBQ3pEO1lBRUQsSUFBSSxPQUFPLEtBQUssYUFBYSxFQUFFO2dCQUM3QixPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO2FBQzFCO2lCQUFNLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ25FLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxDQUFDO2FBQzdEO1NBQ0Y7S0FDRjtJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDckUsQ0FBQyxDQUFBO0FBbEJZLFFBQUEsYUFBYSxpQkFrQnpCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2ZuRGlmZiBmcm9tICdAYXdzLWNkay9jbG91ZGZvcm1hdGlvbi1kaWZmJztcbmltcG9ydCB7IENka1Rvb2xraXRQcm9wcyB9IGZyb20gJ2F3cy1jZGsvbGliL2Nkay10b29sa2l0JztcblxuZXhwb3J0IGNvbnN0IGNka0RpZmZDYXRlZ29yaWVzID0gWydpYW1DaGFuZ2VzJywgJ3NlY3VyaXR5R3JvdXAnLCAncmVzb3VyY2VzJywgJ3BhcmFtZXRlcnMnLCAnbWV0YWRhdGEnLCAnbWFwcGluZ3MnLCAnY29uZGl0aW9ucycsICdvdXRwdXRzJywgJ3Vua25vd24nLCAnZGVzY3JpcHRpb24nXSBhcyBjb25zdDtcbmV4cG9ydCB0eXBlIENka0RpZmZDYXRlZ29yaWVzID0gdHlwZW9mIGNka0RpZmZDYXRlZ29yaWVzO1xuZXhwb3J0IHR5cGUgQ2RrRGlmZkNhdGVnb3J5ID0gQ2RrRGlmZkNhdGVnb3JpZXNbbnVtYmVyXTtcbmV4cG9ydCB0eXBlIFN0YWNrUmF3RGlmZiA9IHtcbiAgc3RhY2tOYW1lOiBzdHJpbmc7XG4gIHJhd0RpZmY6IGNmbkRpZmYuVGVtcGxhdGVEaWZmLFxuICBsb2dpY2FsVG9QYXRoTWFwOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+XG59O1xuXG5leHBvcnQgdHlwZSBOaWNlckRpZmZDaGFuZ2UgPSB7XG4gIGxhYmVsOiBzdHJpbmc7XG4gIGZyb20/OiBhbnk7XG4gIHRvOiBhbnk7XG4gIGFjdGlvbjogJ0FERElUSU9OJyB8ICdVUERBVEUnIHwgJ1JFTU9WQUwnO1xufVxuZXhwb3J0IHR5cGUgTmljZXJEaWZmID0ge1xuICBsYWJlbDogc3RyaW5nO1xuICBjZGtEaWZmUmF3OiBzdHJpbmc7XG4gIG5pY2VyRGlmZj86IHtcbiAgICBjZGtEaWZmQ2F0ZWdvcnk6IENka0RpZmZDYXRlZ29yeTtcbiAgICByZXNvdXJjZUFjdGlvbjogJ0FERElUSU9OJyB8ICdVUERBVEUnIHwgJ1JFTU9WQUwnO1xuICAgIHJlc291cmNlVHlwZTogc3RyaW5nO1xuICAgIHJlc291cmNlTGFiZWw6IHN0cmluZztcbiAgICBjaGFuZ2VzOiBOaWNlckRpZmZDaGFuZ2VbXTtcbiAgfVxufVxuZXhwb3J0IGNvbnN0IG5pY2VyRGlmZkd1YXJkID0gKHRoaW5nOiBhbnkpOiB0aGluZyBpcyBOaWNlckRpZmYgPT5cbiAgdHlwZW9mIHRoaW5nID09PSAnb2JqZWN0JyAmJlxuICB0eXBlb2YgdGhpbmcubGFiZWwgPT09ICdzdHJpbmcnICYmXG4gIHR5cGVvZiB0aGluZy5jZGtEaWZmUmF3ID09PSAnc3RyaW5nJyAmJlxuICBbJ3VuZGVmaW5lZCcsICdvYmplY3QnXS5pbmNsdWRlcyh0eXBlb2YgdGhpbmcubmljZXJEaWZmKTtcblxuZXhwb3J0IHR5cGUgTmljZXJTdGFja0RpZmYgPSB7XG4gIGRpZmY/OiBOaWNlckRpZmZbXTtcbiAgcmF3OiBzdHJpbmc7XG4gIHN0YWNrTmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgbmljZXJTdGFja0RpZmZHdWFyZCA9ICh0aGluZzogYW55KTogdGhpbmcgaXMgTmljZXJTdGFja0RpZmYgPT4ge1xuICBpZiAodHlwZW9mIHRoaW5nID09PSAnb2JqZWN0Jykge1xuICAgIGlmICh0eXBlb2YgdGhpbmcucmF3ID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgdGhpbmcuc3RhY2tOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKCEhdGhpbmcuZGlmZikge1xuICAgICAgICBpZiAodGhpbmcuZGlmZi5maWx0ZXIobmljZXJEaWZmR3VhcmQpLmxlbmd0aCA9PT0gdGhpbmcuZGlmZi5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBjb25zdCBuaWNlclN0YWNrRGlmZlZhbGlkYXRvciA9ICh0aGluZzogYW55KTogTmljZXJTdGFja0RpZmZbXSA9PiB7XG4gIGlmICh0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHRoaW5nLmZpbHRlcihuaWNlclN0YWNrRGlmZkd1YXJkKS5sZW5ndGggPT09IHRoaW5nLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaW5nO1xuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcihgaW5wdXQgaXMgbm90IGEgTmljZXJTdGFja0RpZmZbXTogJHtKU09OLnN0cmluZ2lmeSh0aGluZywgbnVsbCwgMil9YCk7XG59XG5cbmV4cG9ydCBjb25zdCBndWFyZFJlc291cmNlRGlmZiA9ICh0aGluZzogYW55KTogdGhpbmcgaXMgY2ZuRGlmZi5SZXNvdXJjZURpZmZlcmVuY2UgPT5cbiAgdHlwZW9mIHRoaW5nID09PSAnb2JqZWN0JyAmJlxuICB0eXBlb2YgdGhpbmcuZm9yRWFjaERpZmZlcmVuY2UgPT09ICdmdW5jdGlvbic7XG5cbmV4cG9ydCBjb25zdCBkaWZmVmFsaWRhdG9yID0gKHRoaW5nOiBhbnkpOiB7IGRpZmZDb2xsZWN0aW9uS2V5OiBDZGtEaWZmQ2F0ZWdvcnk7IGRpZmZDb2xsZWN0aW9uOiBjZm5EaWZmLkRpZmZlcmVuY2VDb2xsZWN0aW9uPGFueSwgY2ZuRGlmZi5EaWZmZXJlbmNlPGFueT4+IH0gfCB7IGRpZmZLZXk6IENka0RpZmZDYXRlZ29yeTsgZGlmZjogY2ZuRGlmZi5EaWZmZXJlbmNlPGFueT4gfSA9PiB7XG4gIGlmICh0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHRoaW5nLmxlbmd0aCA9PT0gMikge1xuICAgICAgY29uc3QgW2RpZmZLZXksIGRpZmZdID0gdGhpbmc7XG5cbiAgICAgIGlmICghY2RrRGlmZkNhdGVnb3JpZXMuaW5jbHVkZXMoZGlmZktleSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bmV4cGVjdGVkIGRpZmYgY2F0ZWdvcnk6ICR7ZGlmZktleX1gKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRpZmZLZXkgPT09ICdkZXNjcmlwdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHsgZGlmZktleSwgZGlmZiB9O1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZGlmZiA9PT0gJ29iamVjdCcgJiYgZGlmZi5oYXNPd25Qcm9wZXJ0eSgnZGlmZnMnKSkge1xuICAgICAgICByZXR1cm4geyBkaWZmQ29sbGVjdGlvbktleTogZGlmZktleSwgZGlmZkNvbGxlY3Rpb246IGRpZmYgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgZGlmZjogJHtKU09OLnN0cmluZ2lmeSh0aGluZywgbnVsbCwgMil9YCk7XG59XG5cblxuZXhwb3J0IHR5cGUgQ2RrVG9vbGtpdERlcGxveW1lbnRzUHJvcCA9ICdjbG91ZEZvcm1hdGlvbicgfCAnZGVwbG95bWVudHMnO1xuXG5leHBvcnQgdHlwZSBDdXN0b21DZGtUb29sa2l0RXh0cmFQcm9wcyA9IHtcbiAgY2RrVG9vbGtpdERlcGxveW1lbnRzUHJvcDogQ2RrVG9vbGtpdERlcGxveW1lbnRzUHJvcDtcbn1cblxuZXhwb3J0IHR5cGUgQ3VzdG9tQ2RrVG9vbGtpdFByb3BzID0gQ2RrVG9vbGtpdFByb3BzICYgQ3VzdG9tQ2RrVG9vbGtpdEV4dHJhUHJvcHMiXX0=